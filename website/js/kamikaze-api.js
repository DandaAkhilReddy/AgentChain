/**\n * KAMIKAZE Backend API Integration\n * Zero-Knowledge Privacy-First API Client\n */\n\nclass KamikazeAPI {\n    constructor() {\n        // Use environment-specific backend URL\n        this.baseURL = this.getBackendURL();\n        this.token = localStorage.getItem('kamikaze_auth_token');\n    }\n\n    getBackendURL() {\n        // Check if we're in development or production\n        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {\n            return 'http://localhost:3001';\n        }\n        // Production backend URL (will be updated once deployed)\n        return 'https://kamikaze-backend.azurewebsites.net';\n    }\n\n    async makeRequest(endpoint, options = {}) {\n        const url = `${this.baseURL}${endpoint}`;\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                ...(this.token && { 'Authorization': `Bearer ${this.token}` }),\n                ...options.headers\n            },\n            ...options\n        };\n\n        try {\n            const response = await fetch(url, config);\n            const data = await response.json();\n            \n            if (!response.ok) {\n                throw new Error(data.error || 'API request failed');\n            }\n            \n            return data;\n        } catch (error) {\n            console.error(`API Error (${endpoint}):`, error);\n            throw error;\n        }\n    }\n\n    // Health check\n    async getHealth() {\n        return await this.makeRequest('/health');\n    }\n\n    // Authentication\n    async loginWithWallet(walletAddress, signature, message) {\n        const response = await this.makeRequest('/api/auth/wallet-login', {\n            method: 'POST',\n            body: JSON.stringify({\n                wallet_address: walletAddress,\n                signature: signature,\n                message: message\n            })\n        });\n        \n        if (response.token) {\n            this.token = response.token;\n            localStorage.setItem('kamikaze_auth_token', this.token);\n        }\n        \n        return response;\n    }\n\n    // User dashboard with KAMIKAZE token display\n    async getUserDashboard() {\n        return await this.makeRequest('/api/users/dashboard');\n    }\n\n    // Privacy statistics\n    async getPrivacyStats() {\n        return await this.makeRequest('/api/users/privacy-stats');\n    }\n\n    // KAMIKAZE token information\n    async getKamikazeTokenInfo() {\n        return await this.makeRequest('/api/tokens/kamikaze');\n    }\n\n    // Get user balance (commitment-based)\n    async getUserBalance() {\n        return await this.makeRequest('/api/tokens/balance');\n    }\n\n    // Staking operations\n    async getStakingStats() {\n        return await this.makeRequest('/api/staking/stats');\n    }\n\n    async submitStakingProof(stakeCommitment, periodCommitment, proof) {\n        return await this.makeRequest('/api/staking/stake-proof', {\n            method: 'POST',\n            body: JSON.stringify({\n                stake_amount_commitment: stakeCommitment,\n                lock_period_commitment: periodCommitment,\n                staking_proof: proof\n            })\n        });\n    }\n\n    // Agent operations\n    async getAgentMarketplace() {\n        return await this.makeRequest('/api/agents/marketplace');\n    }\n\n    async createAgentProof(agentType, capabilitiesCommitment, stakeCommitment, proof) {\n        return await this.makeRequest('/api/agents/create-proof', {\n            method: 'POST',\n            body: JSON.stringify({\n                agent_type: agentType,\n                capabilities_commitment: capabilitiesCommitment,\n                stake_commitment: stakeCommitment,\n                creation_proof: proof\n            })\n        });\n    }\n\n    // Zero-Knowledge operations\n    async generateCommitment(value, randomness = null) {\n        return await this.makeRequest('/api/zk/generate-commitment', {\n            method: 'POST',\n            body: JSON.stringify({\n                value: value.toString(),\n                randomness: randomness\n            })\n        });\n    }\n\n    async generateRangeProof(value, minRange, maxRange, commitment = null) {\n        return await this.makeRequest('/api/zk/range-proof', {\n            method: 'POST',\n            body: JSON.stringify({\n                value: value,\n                min_range: minRange,\n                max_range: maxRange,\n                commitment: commitment\n            })\n        });\n    }\n\n    async verifyProof(proofType, proof, publicSignals = []) {\n        return await this.makeRequest('/api/zk/verify-proof', {\n            method: 'POST',\n            body: JSON.stringify({\n                proof_type: proofType,\n                proof: proof,\n                public_signals: publicSignals\n            })\n        });\n    }\n\n    // Marketplace operations\n    async getMarketplaceOverview() {\n        return await this.makeRequest('/api/marketplace/overview');\n    }\n\n    // Analytics\n    async getEcosystemAnalytics() {\n        return await this.makeRequest('/api/analytics/ecosystem');\n    }\n\n    async getPrivacyReport() {\n        return await this.makeRequest('/api/analytics/privacy-report');\n    }\n\n    // Utility methods\n    setAuthToken(token) {\n        this.token = token;\n        localStorage.setItem('kamikaze_auth_token', token);\n    }\n\n    clearAuthToken() {\n        this.token = null;\n        localStorage.removeItem('kamikaze_auth_token');\n    }\n\n    isAuthenticated() {\n        return !!this.token;\n    }\n}\n\n// Create global instance\nwindow.kamikazeAPI = new KamikazeAPI();\n\n// Export for module use\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = KamikazeAPI;\n}"